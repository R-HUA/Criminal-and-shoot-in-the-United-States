data = read.csv("Road_Crashes_for_five_Years_Victoria.csv")
install.packages("shiny")
library("shiny")
# Tab 1: Introduction
intro_tab <- tabPanel(
'Background',
titlePanel('Population growth in Australia'),
p('Australia\'s population has been growing consistently since the 1830s.'),
p(img(src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/Australia_Day_%282049745267%29.jpg/800px-Australia_Day_%282049745267%29.jpg')),
p('Data source: ',
a(href = 'https://www.abs.gov.au/statistics/people/population', 'Australian Bureau of Statistics'))
)
# Tab 2: Births
sidebar_content <- sidebarPanel(
h3('Births by state'),
selectInput(
'year',
label = 'Year',
choices = c('2017'='X2017',
'2018'='X2018',
'2019'='X2019',
'2020'='X2020'),
selected = 'X2020'
)
)
main_content <- mainPanel(
p('plot goes here')
)
births_tab <- tabPanel(
'Births',
titlePanel('Births'),
sidebarLayout(
sidebar_content, main_content
)
)
ui <- navbarPage(
'Population growth in Australia',
intro_tab,
births_tab
)
server <- function(input, output, session) {
# server code would be placed here
}
shinyApp(ui, server)
shinyApp(ui, server)
library("shiny")
# Tab 1: Introduction
intro_tab <- tabPanel(
'Background',
titlePanel('Population growth in Australia'),
p('Australia\'s population has been growing consistently since the 1830s.'),
p(img(src = 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/Australia_Day_%282049745267%29.jpg/800px-Australia_Day_%282049745267%29.jpg')),
p('Data source: ',
a(href = 'https://github.com/washingtonpost/data-homicides', 'Criminal homicides over the past decade in 50 of the largest American cities by The Washington Post'))
p('Data source: ',
# Tab 2: Births
sidebar_content <- sidebarPanel(
h3('Births by state'),
selectInput(
'year',
label = 'Year',
choices = c('2017'='X2017',
'2018'='X2018',
'2019'='X2019',
'2020'='X2020'),
selected = 'X2020'
)
)
main_content <- mainPanel(
p('plot goes here')
)
births_tab <- tabPanel(
'Births',
titlePanel('Births'),
sidebarLayout(
sidebar_content, main_content
)
)
ui <- navbarPage(
'Population growth in Australia',
intro_tab,
births_tab
)
server <- function(input, output, session) {
# server code would be placed here
}
shinyApp(ui, server)
runApp('A2.R')
runApp('A2.R')
homicide_data <- read.csv("https://raw.githubusercontent.com/washingtonpost/data-homicides/master/homicide-data.csv")
View(homicide_data)
homicide_data$reported_date <- as.Date(homicide_data$reported_date)
homicide_data$reported_date <- as.Date(homicide_data$reported_date)
View(homicide_data)
homicide_data <- homicide_data %>% filter(!is.na(reported_date))
library(plyr)
library(shiny)
library(dplyr)
library(forcats)
library(leaflet)
library(ukpolice)
library(opencage)
library(ggplot2)
library(highcharter)
library(plotly)
library(leaflet.extras)
library(geojsonio)
homicide_data <- homicide_data %>% filter(!is.na(reported_date))
homicide_data$reported_date <- as.Date(homicide_data$reported_date)
homicide_data$reported_date
as.Date(homicide_data$reported_date)
?as.Date
View(homicide_data)
View(homicide_data)
homicide_data$reported_date <- as.Date(homicide_data$reported_date,origin = "%y%m%d")
homicide_data$reported_date <- as.Date(homicide_data$reported_date,origin = "%Y%m%d")
homicide_data$reported_date <- as.Date(homicide_data$reported_date,origin = "%YYYY%mm%dd")
homicide_data$reported_date <- homicide_data$reported_date[1:4]+"-"+homicide_data$reported_date[5:6]
homicide_data$reported_date <- homicide_data$reported_date[1:4]+"/"+homicide_data$reported_date[5:6]
typeof(homicide_data$reported_date[1])
as.Date('20170215', format = '%Y%m%d')
homicide_data$reported_date <- as.Date(homicide_data$reported_date, format = '%Y%m%d')
homicide_data$reported_date <- as.Date(as.character(homicide_data$reported_date), format = '%Y%m%d')
View(homicide_data)
homicide_data_2015_2016 <- homicide_data %>% filter(between(reported_date, as.Date("2015-01-01"),as.Date("2021-12-31")))
View(homicide_data_2015_2016)
homicide_data_2015 <- homicide_data %>% filter(between(reported_date, as.Date("2015-01-01"),as.Date("2015-12-31")))
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
?textOutput
?renderUI
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
?paste
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
states <- geojsonio::geojson_read("https://rstudio.github.io/leaflet/json/us-states.geojson", what = "sp")
homicide_data <- read.csv("https://raw.githubusercontent.com/washingtonpost/data-homicides/master/homicide-data.csv")
fatal_police_shootings <- read.csv("https://raw.githubusercontent.com/washingtonpost/data-police-shootings/master/fatal-police-shootings-data.csv")
killed <- read.csv("Officers Feloniously Killed.csv")
uspopulation <- read.csv("USpopulation.csv")
usmap <- states
fff <- as.data.frame(table(police_shootings_2015_2021$state))
fatal_police_shootings$date <- as.Date(fatal_police_shootings$date)
police_shootings_2015_2021 <- fatal_police_shootings %>% filter(between(date, as.Date("2015-01-01"),as.Date("2021-12-31")))
fff <- as.data.frame(table(police_shootings_2015_2021$state))
ss <- as.data.frame(table(homicide_data$city))
#s2 <- as.data.frame(table(fatal_police_shootings$city))
names(fff) <- c("state","police_shoot")
fff$police_killed <- NA
fff$State <-NA
for (i in 1:as.integer(lengths(fff[1]))) {
for (j in 1:as.integer(lengths(killed[1]))){
if (fff[i,1] == killed[j,2]){
fff[i,3] <- sum(killed[j,6:12])
fff[i,4] <- killed[j,1]
}
}
}
fff <- fff %>% filter(!is.na(police_killed))
View(fff)
View(fff)
View(fff)
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
View(homicide_data)
View(homicide_data)
runApp('A2.R')
runApp('A2.R')
View(homicide_data)
View(homicide_data)
"2011" + "11"
"2011"[1]
substr(“X2011”, 2,5)
substr("x2111", 2,5)
paste("2011","-01-01")
paste("2011","-01-01",collapse='')
as.Date(paste("2011","-01-01",collapse=''))
paste("2011","01-01",collapse='-')
paste0("2011","-01-01")
as.Date( paste0("2011","-01-01"))
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
sort(unique(homicide_data$disposition)))
sort(unique(homicide_data$disposition))))
sort(unique(homicide_data$disposition)))
sort(unique(homicide_data$disposition))
View(homicide_data)
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
?markerClusterOptions
runApp('A2.R')
runApp('A2.R')
library(plyr)
library(shiny)
library(dplyr)
library(forcats)
library(leaflet)
library(ukpolice)
library(opencage)
library(ggplot2)
library(highcharter)
library(plotly)
library(leaflet.extras)
library(geojsonio)
install.packages(c('plyr','shiny','dplyr','forcats','leaflet','ukpolice','opencage','ggplot2','highcharter','plotly','leaflet.extras','geojsonio'))
install.packages(c("plyr", "shiny", "dplyr", "forcats", "leaflet", "ukpolice", "opencage", "ggplot2", "highcharter", "plotly", "leaflet.extras", "geojsonio"))
states <- geojsonio::geojson_read("https://rstudio.github.io/leaflet/json/us-states.geojson", what = "sp")
homicide_data <- read.csv("https://raw.githubusercontent.com/washingtonpost/data-homicides/master/homicide-data.csv")
fatal_police_shootings <- read.csv("https://raw.githubusercontent.com/washingtonpost/data-police-shootings/master/fatal-police-shootings-data.csv")
killed <- read.csv("Officers Feloniously Killed.csv")
uspopulation <- read.csv("USpopulation.csv")
usmap <- states
View(killed)
View(killed)
library(shiny); runApp('A2.R')
library(shiny); runApp('A2.R')
runApp('A2.R')
View(killed)
fff <- killed
names(fff) <- c("state","number of civilian killed by police","Number of officers feloniously killed")
View(fff)
names(fff)
fff$Number of officers feloniously killed
fff$"Number of officers feloniously killed"
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
?ggplot
?scale_x_continuous
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
View(killed)
View(killed)
state_killed <- killed[1]
View(state_killed)
state_killed <- killed[,1]
View(states)
state_killed
state_killed <- killed[1,]
View(state_killed)
sta_k <- data.frame(name(state_killed),state_killed)
sta_k <- data.frame(names(state_killed),state_killed)
View(sta_k)
state_killed[1]
state_killed[1,1]
state_killed[1,]
state_killed[1,:]
state_killed[1,2:4]
vector(state_killed[1,])
for (i in state_killed){
print(i)
}
vv <- vector()
vv.append(1)
vv <- names(state_killed)
vv
state_killed[1]
state_killed[,1]
state_killed[1,]
linedata <- names(state_killed)
for (i in 1:as.integer(lengths(state_killed[1,]))){
linedata[i] <- state_killed[1,i]
}
lengths(state_killed[1,])
length(state_killed[1,])
linedata <- names(state_killed)
for (i in 1:as.integer(length(state_killed[1,]))){
linedata[i] <- state_killed[1,i]
}
linedata[3:12]
state_killed <- data.frame(names(state_killed)[3:12],linedata[i][3:12])
View(state_killed)
state_killed <- data.frame(names(state_killed)[3:12],linedata[3:12])
View(state_killed)
state_killed <- killed[1,]
state_killed <- killed[1,]
linedata <- names(state_killed)
for (i in 1:as.integer(length(state_killed[1,]))){
linedata[i] <- state_killed[1,i]
}
state_killed <- data.frame(names(state_killed)[3:12],linedata[3:12])
View(state_killed)
View(state_killed)
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
types(state_killed[2])
type(state_killed[2])
as.integer(state_killed[2])
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
paste("1","1")
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
?p
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
View(homicide_data)
names(homicide_data)
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
names(fatal_police_shootings)
View(fatal_police_shootings)
colname = names(fatal_police_shootings)
c("Signs of mental illness" = colname[11],"Race of the victim" =colname[8],"Gender of the victim" = colname[7], "Whether the victim was armed" = colname[5], "Threat level" = colname[12],"Whether the victim was moving away from officers" = colname[13])
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
sort(unique(killed$State))
sort(unique(killed$State))[1]
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
as.data.frame(table(fatal_police_shootings$input$gender))
var <- as.data.frame(table(fatal_police_shootings$input$gender))
View(var)
aa = "gender"
fatal_police_shootings$(aa)
fatal_police_shootings$a
fatal_police_shootings$aa
which(names(fatal_police_shootings) == "gender")
as.data.frame(table(fatal_police_shootings[colnumber]))
as.data.frame(table(fatal_police_shootings[which(names(fatal_police_shootings) == "gender")]))
as.data.frame(table(fatal_police_shootings[which(names(fatal_police_shootings) == "gender")]))[1,1]
as.data.frame(table(fatal_police_shootings[which(names(fatal_police_shootings) == "gender")]))[2,1]
as.data.frame(table(fatal_police_shootings[which(names(fatal_police_shootings) == "gender")]))[1]
aaaa = as.data.frame(table(fatal_police_shootings[which(names(fatal_police_shootings) == "gender")]))
View(aaaa)
aaa[1] <- c("UN","FE","MA")
aaaa[1] <- c("UN","FE","MA")
aaaa
names(aaaa) <- "Numbs"
aaaa
names(aaaa)[2] <- "Numbqs"
aaaa
View(fatal_police_shootings)
var <- as.data.frame(table(fatal_police_shootings[ which(names(fatal_police_shootings) == "race")]))
var
substr('White',1)
substr('White',1,1)
data.frame(c('White','Black','Asian','Native American','Hispanic','Other'),c('White','Black','Asian','Native American','Hispanic','Other'))
shooting_race = data.frame(c('White','Black','Asian','Native American','Hispanic','Other'),c('White','Black','Asian','Native American','Hispanic','Other'))
View(shooting_race)
View(var)
View(shooting_race)
shooting_race <- data.frame(c('White','Black','Asian','Native American','Hispanic','Other'),c('White','Black','Asian','Native American','Hispanic','Other'))
names(shooting_race) <- c('Race','Numbers')
for (i in 1:as.integer(lengths(shooting_race[1]))) {
for (j in 1:as.integer(lengths(var[1]))){
if (substr(shooting_race[i,1],1,1) == var[j,1]){
shooting_race[i,2] <- var[j,2]
}
}
}
}
shooting_race <- data.frame(c('White','Black','Asian','Native American','Hispanic','Other'),c('White','Black','Asian','Native American','Hispanic','Other'))
names(shooting_race) <- c('Race','Numbers')
for (i in 1:as.integer(lengths(shooting_race[1]))) {
for (j in 1:as.integer(lengths(var[1]))){
if (substr(shooting_race[i,1],1,1) == var[j,1]){
shooting_race[i,2] <- var[j,2]
}
}
}
View(var)
View(shooting_race)
View(var)
View(state_killed)
View(sta_k)
View(shooting_race)
View(var)
View(shooting_race)
View(shooting_race)
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
shooting_race %>% mutate(name = fct_reorder(shooting_race$Numbers, shooting_race$Race))
ggplot(data= (shooting_race %>% mutate(name = fct_reorder(shooting_race$Numbers, shooting_race$Race))) ,aes_string(x='Race', y='Numbers')) +
geom_bar(stat='identity', width=0.7)
p <- ggplot(data = shooting_race, mapping = aes(x = Race, y = Numbers)) + geom_bar(stat = 'identity')
ggplot(data = shooting_race, mapping = aes(x = Race, y = Numbers)) + geom_bar(stat = 'identity')
ggplot(data = shooting_race, mapping = aes(x =  Numbers, y = Race)) + geom_bar(stat = 'identity')
x <- c('A','B','C','D','E')
y <- c(13,22,16,31,8)
df <- data.frame(x = x, y = y)
ggplot(data = df, mapping = aes(x = x, y = y)) + geom_bar(stat = 'identity')
shooting_race
df <- data.frame(shooting_race[1], shooting_race[2])
df
df <- data.frame(x = shooting_race[1], y = shooting_race[2])
df
ggplot(data = df, mapping = aes(x = x, y = y)) + geom_bar(stat = 'identity')
ggplot(data = df, mapping = aes(x = Race, y = Numbers)) + geom_bar(stat = 'identity')
View(var)
var[1,1]
View(var)
View(var)
ggplot(data= (var %>% mutate(name = fct_reorder(var$Freq, var$race))) ,aes_string(x='race', y='Freq')) +
geom_bar(stat='identity', width=0.7, fill = "#66ccff")
name = fct_reorder(var$Freq, var$race))
fct_reorder(var$Freq, var$race)
ggplot(data = df, mapping = aes(x = race, y = Freq)) + geom_bar(stat = 'identity')
ggplot(data = var, mapping = aes(x = race, y = Freq)) + geom_bar(stat = 'identity')
var[-1]
var[-1,]
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
runApp('A2.R')
